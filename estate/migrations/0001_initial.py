# Generated by Django 5.2.4 on 2025-08-31 21:30

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=100, unique=True)),
                ('role', models.CharField(choices=[('owner', 'Property Owner'), ('tenant', 'Tenant'), ('admin', 'Administrator')], default='tenant', max_length=20)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='House',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('house_type', models.CharField(choices=[('apartment', 'Apartment Building'), ('single_family', 'Single Family Home'), ('duplex', 'Duplex'), ('townhouse', 'Townhouse'), ('condo', 'Condominium')], max_length=50)),
                ('house_number', models.CharField(help_text='Street address or house number', max_length=20, validators=[django.core.validators.MinLengthValidator(1)])),
                ('num_apartments', models.PositiveIntegerField(default=1, help_text='Number of apartments/units in this property')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('owner', models.ForeignKey(limit_choices_to={'role': 'owner'}, on_delete=django.db.models.deletion.CASCADE, related_name='owned_houses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'House',
                'verbose_name_plural': 'Houses',
                'db_table': 'houses',
                'unique_together': {('house_number', 'owner')},
            },
        ),
        migrations.CreateModel(
            name='ChiefTenantAssignment',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('assignment_date', models.DateField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.OneToOneField(limit_choices_to={'role': 'tenant'}, on_delete=django.db.models.deletion.CASCADE, related_name='chief_tenant_assignment', to=settings.AUTH_USER_MODEL)),
                ('house', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chief_tenant_assignments', to='estate.house')),
            ],
            options={
                'verbose_name': 'Chief Tenant Assignment',
                'verbose_name_plural': 'Chief Tenant Assignments',
                'db_table': 'chief_tenant_assignments',
            },
        ),
        migrations.CreateModel(
            name='Occupant',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('full_name', models.CharField(max_length=100, validators=[django.core.validators.MinLengthValidator(2)])),
                ('apartment_number', models.CharField(help_text='Apartment/unit number within the house', max_length=20)),
                ('is_chief_tenant', models.BooleanField(default=False, help_text='Whether this occupant is the chief tenant')),
                ('move_in_date', models.DateField(auto_now_add=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('house', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='occupants', to='estate.house')),
            ],
            options={
                'verbose_name': 'Occupant',
                'verbose_name_plural': 'Occupants',
                'db_table': 'occupants',
                'unique_together': {('house', 'apartment_number')},
            },
        ),
    ]
